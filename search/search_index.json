{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Dynamic Forms","text":""},{"location":"#what-is-it-and-what-can-i-do-with-it","title":"What is it and what can I do with it","text":"<p>DynamicForms is a client library to automate progressive filtering and initialisation of dynamic fields in an easy and fast way.</p> <p>It supports the developer in managing and centralizing all forms interactions.</p> <p>It's written in typescript and built with Vite</p> <p>Here's some examples.</p>"},{"location":"#progressive-filtering","title":"Progressive filtering","text":""},{"location":"#automatic-fields-initialisation-with-dynamic-content","title":"Automatic fields initialisation with dynamic content","text":"<p>The progressive filtering status is restored: all the available options are automatically fetched.</p>"},{"location":"#visibility-changes-depending-on-fields-state","title":"Visibility changes depending on fields' state","text":""},{"location":"#updating-rules","title":"Updating rules","text":""},{"location":"#much-much-more","title":"Much much more","text":"<p>Got your attention? Try it!</p>"},{"location":"#main-features","title":"Main features","text":"<ul> <li> Easy to use: DynamicForms works in a declarative way; no code with the default behavior, just a simple configuration!</li> <li> Modern javascript and backward compatible: works on all browsers!</li> <li> Lightweight: having no dependencies, you can integrate it everywhere!</li> <li> Automate repetitive and boring operations: read values, fetch data making async remote calls, update fields' status, clear other fields, hide/show sections... even listing them is BORING!</li> <li> Highly customizable: are you using an external library with custom html elements? Don't worry as you can specify your own functions to read/write data</li> </ul>"},{"location":"#support","title":"Support","text":"<p>If you want to support me just star the project on github and share it with your collegues.</p> <p>If you have questions or suggestions open an issue on github.</p> <p>Thank you very much for your support \u2764</p>"},{"location":"dynamic-forms-module/","title":"DynamicForms library","text":""},{"location":"dynamic-forms-module/#how-to-use-it","title":"How to use it","text":"<p>DynamicForms is designed to be simple and straightforward  - no complex setup or configuration required.</p> <p>The library offers 2 main functions that handle all the heavy lifting for you, including automatic configuration fixes and form initialization.</p> <p>For 90% of use cases, <code>makeForm</code> is all you need!</p> <p>First, import the module (see loading guide)</p> <pre><code>&lt;script type=\"module\"&gt;\n    import { makeForm, getForm } '@simomosi/dynamic-forms';\n&lt;/script&gt;\n</code></pre>"},{"location":"dynamic-forms-module/#properties","title":"Properties","text":""},{"location":"dynamic-forms-module/#makeform-formconfiguration","title":"<code>makeForm (formConfiguration)</code>","text":"<p>Istantiates a DynamicForm.</p> <p>Parameters</p> <ul> <li>{<code>object</code>} <code>formConfiguration</code>: the form configuration</li> </ul> <p>Returns</p> <ul> <li>{<code>DynamicForm</code>} a DynamicForm instance</li> </ul>"},{"location":"dynamic-forms-module/#getform-id","title":"<code>getForm (id)</code>","text":"<p>Returns a DynamicForm instance corresponding to the form id, if it exists.</p> <p>Parameters</p> <ul> <li>{<code>string</code>} <code>id</code>: the form id</li> </ul> <p>Returns</p> <ul> <li>{<code>DynamicForm | null</code>} the DynamicForm instance or null if it does not exists</li> </ul>"},{"location":"configurations/fields-configuration/","title":"Field configuration","text":"<p>This document describes a single field configuration. The field configuration list must be included in the fields section in the form configuration.</p> <p>Just specify fields with custom behavior as the standard ones will be discovered and included in the dynamic-form automatically.</p> <p>Here's a complete single field configuration. You just need to specify the attributes you need, the other will have default values.</p> Generic elementSelect elementCheckbox element <pre><code>const fieldConfiguration = {\n    name: 'fieldName',\n    io: {  // Customize field input/output\n        event: 'change',\n        get: (htmlElement) =&gt; { },\n        set: (htmlElement, value) =&gt; { },\n    },\n    fetch: { // Remote call options\n        method: 'GET',\n        makeUrl: (data) =&gt; { },\n        makeBody: (data) =&gt; { }, // JSON.stringify, formData, text...\n        fullFetchConfig: {}, // Fetch complete configuration\n    },\n    behavior: {\n        clear: (htmlElement) =&gt; { }, // Clear field from its content\n        beforeUpdate: (htmlElement, data, subjectName) =&gt; { return true; }, // Executed before the remote call. Return false to block the update\n        updateStatus: (htmlElement, data, subjectName) =&gt; { },\n        afterUpdate: (htmlElement, data, subjectName) =&gt; { } // Executed after the remote call\n    }\n};\n</code></pre> <pre><code>const fieldConfiguration = {\n    name: 'fieldName',\n    io: /* ... */,\n    fetch: /* ... */,\n    behavior: /* ... */,\n    select: { // Only for select elements\n        postProcessData: (htmlElement, data) =&gt; { }, // Process data retrieved by remote call\n        saveData: (htmlElement, data) =&gt; { }, // Manually save data in html (e.g. creating `&lt;option value=\"value\"&gt;'text'&lt;/option&gt;` nodes)\n        clearOnParentVoid: true, // True (default) to clear field content when subject is empty; false to trigger a remote call\n    }\n};\n</code></pre> <pre><code>const fieldConfiguration = {\n    name: 'fieldName',\n    io: /* ... */,\n    fetch: /* ... */,\n    behavior: /* ... */,\n    checkbox: { // Only for checkbox elements\n        booleanValue: true // True (default) to get element's value as boolean, based on the checked property; false to get the value property\n    }\n};\n</code></pre>"},{"location":"configurations/fields-configuration/#name","title":"<code>name</code>*","text":"<p>The html element name.</p> <p>Type: <code>string</code>.</p> <p>required</p>"},{"location":"configurations/fields-configuration/#io","title":"<code>io</code>","text":"<p>Object which groups properties related to field input and output.</p>"},{"location":"configurations/fields-configuration/#event","title":"<code>event</code>","text":"<p>The html event which symbolize the Subject's status change (e.g. change for a select, click for a checkbox...).</p> <p>It is used to put an event listener which will notify Subject's Observers.</p> <p>Type: <code>string</code>.</p> <p>Default value: <code>change</code>.</p>"},{"location":"configurations/fields-configuration/#get-htmlelement","title":"<code>get (htmlElement)</code>","text":"<p>Function to fetch the html element's value. Useful for custom html elements.</p> <p>Parameters</p> <ul> <li>{<code>node | NodeList</code>} <code>htmlElement</code>: the html node</li> </ul> <p>Returns</p> <ul> <li>{<code>string</code>} the field content</li> </ul>"},{"location":"configurations/fields-configuration/#set-htmlelement","title":"<code>set (htmlElement)</code>","text":"<p>Function to set the html element's value. Useful for custom html elements.</p> <p>Parameters</p> <ul> <li>{<code>node | NodeList</code>} <code>htmlElement</code>: the html node</li> <li>{<code>mixed</code>} <code>value</code>: the field's new value</li> </ul> <p>Returns</p> <ul> <li>{<code>void</code>}</li> </ul>"},{"location":"configurations/fields-configuration/#fetch","title":"<code>fetch</code>*","text":"<p>Object which groups properties related to remote calls.</p> <p>Available only for DynamicSelect instances (select-option like fields).</p> <p>Required only if the select element is an observer (it will be updated for every observed subject change), unless you specify a new updateStatus function.</p>"},{"location":"configurations/fields-configuration/#method","title":"<code>method</code>","text":"<p>It's the http request method (or verb).</p> <p>Type: <code>string</code>.</p> <p>Default value: <code>GET</code></p>"},{"location":"configurations/fields-configuration/#makeurl-data","title":"<code>makeUrl (data)</code>*","text":"<p>A function to generate the url to make the remote call to.</p> <p>required</p> <p>Parameters</p> <ul> <li>{<code>JSON</code>} <code>data</code>: data obtained from additionalData and externalData functions in Update Rule Config</li> </ul> <p>Returns</p> <ul> <li>{<code>string</code>} The remote call url</li> </ul>"},{"location":"configurations/fields-configuration/#makebody-data","title":"<code>makeBody (data)</code>","text":"<p>A function to generate the remote call body in the desired method (e.g. JSON.stringify, FormData...).</p> <p>It's not necessary if the remote call uses the GET request method (parameters need to be placed in the url).</p> <p>Parameters</p> <ul> <li>{<code>JSON</code>} <code>data</code>: data obtained from additionalData and externalData functions in Update Rule Config</li> </ul> <p>Returns</p> <ul> <li>{<code>object</code>} The remote call body</li> </ul>"},{"location":"configurations/fields-configuration/#fullfetchconfig-data","title":"<code>fullFetchConfig (data)</code>","text":"<p>A function to generate the complete Fetch configuration for remote calls.</p> <p>If this function is defined, the updateStatus default function will ignore fetch.method property and fetch.makeBody function.</p> <p>Parameters</p> <ul> <li>{<code>JSON</code>} <code>data</code>: data obtained from additionalData and externalData functions in Update Rule Config</li> </ul> <p>Returns</p> <ul> <li>{<code>object</code>} The complete Fetch configuration</li> </ul>"},{"location":"configurations/fields-configuration/#behavior","title":"<code>behavior</code>","text":"<p>Object which groups properties related to field behavior.</p>"},{"location":"configurations/fields-configuration/#clear-htmlelement","title":"<code>clear (htmlElement)</code>","text":"<p>Function to unset the field's current value. Sometimes it is used to clear the field from its content (for input and select types).</p> <p>Parameters</p> <ul> <li>{<code>node | NodeList</code>} <code>htmlElement</code>: the html node</li> </ul> <p>Returns</p> <ul> <li>{<code>void</code>}</li> </ul>"},{"location":"configurations/fields-configuration/#beforeupdate-htmlelement-data-subjectname","title":"<code>beforeUpdate (htmlElement, data, subjectName)</code>","text":"<p>Method called before triggering the field's status update. If return value is false, the update is aborted.</p> <p>Default behavior: nothing. For DynamicSelect elements it clear the field content if clearOnParentVoid conditions are satisfied.</p> <p>Parameters</p> <ul> <li>{<code>node | NodeList</code>} <code>htmlElement</code>: the html node</li> <li>{<code>JSON</code>} <code>data</code>: data obtained from additionalData and externalData functions in Update Rule Config</li> <li>{<code>string</code>}: <code>subjectName</code>: the name of the subject who triggered the update. It can be null if the update is triggered manually</li> </ul> <p>Returns</p> <ul> <li>{<code>boolean</code>} false to abort the update, true otherwise</li> </ul>"},{"location":"configurations/fields-configuration/#updatestatus-htmlelement-data-subjectname","title":"<code>updateStatus (htmlElement, data, subjectName)</code>","text":"<p>Method to update the field status. It is useful to update the field's attributes (display, disabled...) and content.</p> <p>Default behavior: nothing. For DynamicSelect elements it makes a remote call (using fetch), retrieves new date and saves it as select new content (option).</p> <p>Parameters</p> <ul> <li>{<code>node | NodeList</code>} <code>htmlElement</code>: the html node</li> <li>{<code>JSON</code>} <code>data</code>: data obtained from additionalData and externalData functions in Update Rule Config</li> <li>{<code>string</code>}: <code>subjectName</code>: the name of the subject who triggered the update. It can be null if the update is triggered manually</li> </ul> <p>Returns</p> <ul> <li>{<code>Promise&lt;void&gt;</code>}</li> </ul>"},{"location":"configurations/fields-configuration/#afterupdate-htmlelement-data-subjectname","title":"<code>afterUpdate (htmlElement, data, subjectName)</code>","text":"<p>Method called after triggering the field's status update.</p> <p>Parameters</p> <ul> <li>{<code>node | NodeList</code>} <code>htmlElement</code>: the html node</li> <li>{<code>JSON</code>} <code>data</code>: data obtained from additionalData and externalData functions in Update Rule Config</li> <li>{<code>string</code>}: <code>subjectName</code>: the name of the subject who triggered the update. It can be null if the update is triggered manually</li> </ul> <p>Returns</p> <ul> <li>{<code>boolean</code>} (currently) unused</li> </ul>"},{"location":"configurations/fields-configuration/#select","title":"<code>select</code>","text":"<p>Object which groups properties related to select-option elements.</p>"},{"location":"configurations/fields-configuration/#postprocessdata-htmlelement-data","title":"<code>postProcessData (htmlElement, data)</code>","text":"<p>Function to process data retrieved by remote call. It is useful for filtering/ordering data.</p> <p>Parameters</p> <ul> <li>{<code>node | NodeList</code>} <code>htmlElement</code>: the html node</li> <li>{<code>JSON | object[]</code>} <code>data</code>: data retrieved from the remote call</li> </ul> <p>Returns</p> <ul> <li>{<code>JSON | object[]</code>} post-processed data</li> </ul>"},{"location":"configurations/fields-configuration/#savedata-htmlelement-data","title":"<code>saveData (htmlElement, data)</code>","text":"<p>Function to phisically save (post-processed) data retrieved by a remote call as html.</p> <p>Default behavior: saves data as option html elements using value and text properties, creating also empty option if they are not present in retrieved data.</p> <p>Parameters</p> <ul> <li>{<code>node | NodeList</code>} <code>htmlElement</code>: the html node where data will be saved</li> <li>{<code>JSON | object[]</code>} <code>data</code>: data retrieved from the remote call</li> </ul> <p>Returns</p> <ul> <li>{<code>void</code>}</li> </ul>"},{"location":"configurations/fields-configuration/#clearonparentvoid","title":"<code>clearOnParentVoid</code>","text":"<p>Property which (when <code>true</code>) tells to clear field content when subject value is empty instead of triggering a remote call (when <code>false</code>).</p> <p>Type: <code>boolean</code>.</p> <p>Default value: <code>true</code>.</p>"},{"location":"configurations/fields-configuration/#checkbox","title":"<code>checkbox</code>","text":"<p>Object which groups properties related to select-option elements.</p>"},{"location":"configurations/fields-configuration/#booleanvalue","title":"<code>booleanValue</code>","text":"<p>Property which tells if the field's value is boolean.</p> <p>When true the field considers its value as boolean, based on the  html <code>checked</code> attribute; when false it considers its value as string, based on the <code>value</code> attribute.</p> <p>Type: <code>boolean</code>.</p> <p>Default value: <code>true</code>.</p>"},{"location":"configurations/form-configuration/","title":"Form configuration","text":"<p>This document describes the complete form configuration with focus on each property.</p> <p>The configuration is written client side and passed to the correct method of dynamicForms module for the form instantiation.</p> <p>Glossary:</p> <ul> <li>Subject: the subject is the entity who changed</li> <li>Observer: the observer is an entity who is notified by the subject change</li> </ul> <p>Here's the complete form configuration:</p> <pre><code>const formConfiguration = {\n    id: 'form_id',\n    debug: true,\n    behavior: {\n        beforeUpdate: (subjectName) =&gt; { }, // Executed before the update related events. Return false to block all updates\n        afterUpdate: (subjectName) =&gt; { }, // Executed after the update related events\n        beforeInit: () =&gt; { }, // Executed before form initialization\n        afterInit: () =&gt; { } // Executed after form initialization\n    },\n    fields: [], // Collection of fields objects\n    rules: [], // Collection of rules objects\n    init: [] // Collection of init objects\n};\n</code></pre>"},{"location":"configurations/form-configuration/#id","title":"<code>id</code>*","text":"<p>The form id. Just the plain text, no '#'.</p> <p>Type: <code>string</code>.</p> <p>required</p>"},{"location":"configurations/form-configuration/#debug","title":"<code>debug</code>","text":"<p>A flag to activate the debug mode which prints in the console all the rules right before their execution.</p> <p>Type: <code>boolean</code>.</p>"},{"location":"configurations/form-configuration/#behavior","title":"<code>behavior</code>","text":"<p>Object which groups properties related to form behavior (e.g. what to do before or after an update event).</p>"},{"location":"configurations/form-configuration/#beforeupdate-subjectname","title":"<code>beforeUpdate (subjectName)</code>","text":"<p>Method called after a subject registers an update, but before triggering the update on the whole form.</p> <p>Useful to show a loader during the fields update.</p> <p>Parameters</p> <ul> <li>{<code>string | null</code>} <code>subjectName</code>: the name of the subject who triggered the update. It can be null if the update is triggered manually</li> </ul> <p>Returns</p> <ul> <li>{<code>bool</code>} false to abort the update, true otherwise</li> </ul>"},{"location":"configurations/form-configuration/#afterupdate-subjectname","title":"<code>afterUpdate (subjectName)</code>","text":"<p>Method called after the form update, and in particular after all involved form's fields have completed their update.</p> <p>Useful to hide a loader after the fields update.</p> <p>Parameters</p> <ul> <li>{<code>string | null</code>} <code>subjectName</code>: the name of the subject who triggered the update. It can be null if the update is triggered manually</li> </ul> <p>Returns</p> <ul> <li>{<code>void</code>}</li> </ul>"},{"location":"configurations/form-configuration/#beforeinit","title":"<code>beforeInit ()</code>","text":"<p>Method executed before the form initialisation.</p> <p>Useful to show a loader before all fields are initialised.</p> <p>Returns</p> <ul> <li>{<code>void</code>}</li> </ul>"},{"location":"configurations/form-configuration/#afterinit","title":"<code>afterInit ()</code>","text":"<p>Method executed after the form initialisation.</p> <p>Useful to hide any loader after the form is ready.</p> <p>Returns</p> <ul> <li>{<code>void</code>}</li> </ul>"},{"location":"configurations/form-configuration/#fields","title":"<code>fields</code>","text":"<p>A collection of Fields configurations.</p> <p>Include here fields with custom behavior (get/set/update operations). Standard fields will be discovered automatically.</p> <p>See Fields configuration.</p>"},{"location":"configurations/form-configuration/#rules","title":"<code>rules</code>","text":"<p>A collection of Update Rules configurations.</p> <p>Include here all rules like \"if field A changes, trigger the update of fields B and C\".</p> <p>See Update Rules configuration.</p>"},{"location":"configurations/form-configuration/#init","title":"<code>init</code>","text":"<p>A collection of Init Rules configurations.</p> <p>Include here all fields which will be updated during the DynamicForm instantiation.</p> <p>See Initialisation Rules configuration.</p>"},{"location":"configurations/init-rules/","title":"Single Initialisation Rule configuration","text":"<p>These rules are used to manage fields initialization.</p> <p>Parameters in init rules can reference to form fields and external data.</p> <pre><code>const initialisationRuleConfiguration = {\n    name: 'fieldName',\n    value: any\n};\n</code></pre>"},{"location":"configurations/init-rules/#name","title":"<code>name</code>*","text":"<p>The field name.</p>"},{"location":"configurations/init-rules/#value","title":"<code>value</code>","text":"<p>The field value. It can be any primitive value.</p> <p>This attribute has 2 purposes:</p> <ul> <li>It's passed to all other fields during initialisation; </li> <li>It will be the value automatically selected as the current field value; if the field type is select, the value must be available to be selected.</li> </ul>"},{"location":"configurations/update-rules/","title":"Single Update Rule configuration","text":"<p>These rules are used to manage fields update.</p> <pre><code>const updateRuleConfiguration = {\n    name: 'fieldName',\n    update: [],  // Array of form fields names to notify when events occour\n    additionalData: [], // Array of other form field names to send to server\n    externalData: (data, subjectName) =&gt; { } // Function which returns a json of data\n};\n</code></pre>"},{"location":"configurations/update-rules/#name","title":"<code>name</code>*","text":"<p>The field name inside the form.</p>"},{"location":"configurations/update-rules/#additionaldata","title":"<code>additionalData</code>","text":"<p>A collection of other fields name whose value will be automatically fetched and used in the field's update function.</p>"},{"location":"configurations/update-rules/#externaldata-data-subjectname","title":"<code>externalData (data, subjectName)</code>","text":"<p>A function to collect other data used in the update function but external to the form (e.g. a timestamp).</p> <p>Parameters</p> <ul> <li>{<code>object</code>} <code>data</code>: data obtained from the additional data function</li> <li>{<code>string | null</code>} <code>subjectName</code>: the name of the subject who triggered the update. It can be null if the update is triggered manually</li> </ul> <p>Returns</p> <ul> <li>{<code>object</code>} An object with external data values (key-value format)</li> </ul>"},{"location":"dev/contribute/","title":"Contribute","text":"<p>Help me develop DynamicForms!</p> <p>Remember to work on <code>src/*.ts</code> files, and test them building the bundle and importing it (<code>import { makeForm } from '@dist/dynamic-forms.es.js';</code> for prod build, <code>import { makeForm } from '@';</code> for dev mode).</p> <p>Useful commands:</p> <ul> <li><code>npm run dev</code> - Start Vite server for local development</li> <li><code>npm run build</code> - Build DynamicForms library in <code>dist</code> folder</li> </ul> <p>Please, update also the documentation if you change anything.</p> <p>Thank you very much for your support \u2764</p>"},{"location":"dev/contribute/#disclaimer","title":"Disclaimer","text":"<p>DynamicForms is build considered some use-cases I faced in my career.</p> <p>It is a very generic library but there may be other use cases which I didn't account for. In this case please let me know, we can work together in implementing new features.</p>"},{"location":"dev/contribute/#issuessuggestions","title":"Issues/Suggestions","text":"<p>If you have trouble using DynamicForms open an issue, I'll be glad to help you. Suggestions are also welcome!</p> <p>It will be useful if you pass me some code to try: you can use tools like CodePen, PasteBin etc.</p>"},{"location":"dev/contribute/#project-structure","title":"Project Structure","text":"<p>Here is the UML Class Diagram to help you understand the project structure. Types are not specified for space reasons: the diagram is created using Mermaid which places elements automatically.</p> <pre><code>classDiagram\n\n    class DynamicForm {\n        FormConfiguration config\n        HTMLFormElement htmlElement\n        Map\u276cString DynamicElement\u276d entities\n        boolean debug\n        boolean enabled\n        json elementToClassMapping\n\n        +ready() Promise\u276cvoid\u276d\n        +notify(subjectName) Promise\u276cvoid\u276d\n        -fetchAllParameters(rule) object\n        -clearCascade(currentSubject) Promise\u276cvoid\u276d\n        +manualUpdate(data, subjectName) Promise\u276cvoid\u276d\n        -getField(name) DynamicElement\n        +getId() string\n        +setEnabled() void\n        +isEnabled() boolean\n    }\n\n    class dynamicForms {\n        -Map\u276cString DynamicForm\u276d formCollection\n        +makeForm(formConfiguration) DynamicForm\n        +getForm(id) DynamicForm\n    }\n\n    note for dynamicForms \"Library entrypoint\"\n\n    class ConfigurationFixer {\n        +fix(formHtmlElement, formConfiguration) FormConfiguration\n    }\n\n    class FieldBuilder {\n        +createFieldsMap(fieldsCollection, htmlForm)\n    }\n\n    class DynamicElement {\n        -FieldConfiguration config\n        -NodeList htmlElement\n        -string name\n        -JSON defaultConfig\n        +get() string\n        +set(value) string\n        +clear()\n        +update(data, subjectName)\n        #beforeUpdate(data, subjectName) boolean\n        #updateStatus(data, subjectName) Promise\u276cvoid\u276d\n        #afterUpdate(data, subjectName) boolean\n    }\n\n    class DynamicSelect {\n        -string method\n        +postProcessData(data) object[]\n        +saveData(data) void\n    }\n\n    dynamicForms --&gt; ConfigurationFixer\n    dynamicForms --&gt; FieldBuilder\n\n    DynamicForm &lt;-- dynamicForms\n    DynamicForm o-- DynamicElement\n\n    DynamicElement &lt;|-- DynamicSelect\n    DynamicElement &lt;|-- DynamicCheckbox\n    DynamicElement &lt;|-- DynamicRadio\n</code></pre>"},{"location":"dev/cool_stuff/","title":"Cool computer science stuff","text":"<ul> <li>DynamicForms is a particular instance of the Observer Design Pattern in which Observers and Subjects are all of the same type: html elements</li> <li>The function used to clear fields on cascade is the Depth-first search (DFS) used in Graph theory</li> <li>The library entry point (src/index.js) implements the Facade Design Pattern to improve software usability: it masks more complex underlying code e.g. explicit objects instantiation and configuration fixing</li> </ul>"},{"location":"dev/todo_changelog/","title":"ToDo & Changelog","text":""},{"location":"dev/todo_changelog/#todo-list","title":"ToDo List","text":"<ul> <li> Use dynamic-forms with dynamically created fields</li> </ul>"},{"location":"dev/todo_changelog/#changelog","title":"Changelog","text":"<p>Dynamic-forms follows the semver standard.</p>"},{"location":"dev/todo_changelog/#300","title":"3.0.0","text":"<ul> <li>Webpack has been replaced with Vite</li> <li>Library import does not expose the <code>dynamicForms</code> module anymore but <code>makeform</code> and <code>getForm</code> functions directly</li> </ul>"},{"location":"dev/todo_changelog/#200","title":"2.0.0","text":"<ul> <li>Library has been rewritten in typescript</li> <li><code>FieldConfiguration.dropdown</code> renamed to <code>FieldConfiguration.select</code></li> <li>Better documentation</li> </ul>"},{"location":"dev/todo_changelog/#130","title":"1.3.0","text":"<ul> <li>Added automatic field discovery: you don't need to specify fields with standard behavior anymore</li> </ul>"},{"location":"dev/todo_changelog/#120","title":"1.2.0","text":"<ul> <li>Supported fields initialisation</li> <li>Added <code>form.ready()</code> method to synchronise post-initialisation operations</li> </ul>"},{"location":"dev/todo_changelog/#101","title":"1.0.1","text":"<ul> <li>Added support for nested input names (link). Thanks to @yoannisj</li> </ul>"},{"location":"dev/todo_changelog/#100","title":"1.0.0","text":"<ul> <li>First release</li> </ul>"},{"location":"start/installation/","title":"Installation","text":""},{"location":"start/installation/#using-a-package-manager-recommeded","title":"Using a package manager (recommeded)","text":"npmYarnpnpm <pre><code>npm i @simomosi/dynamic-forms\n</code></pre> <pre><code>yarn add @simomosi/dynamic-forms\n</code></pre> <pre><code>pnpm i @simomosi/dynamic-forms\n</code></pre>"},{"location":"start/installation/#using-a-cdn","title":"Using a CDN","text":"<pre><code>&lt;script src='https://unpkg.com/@simomosi/dynamic-forms@latest'&gt;&lt;/script&gt;\n</code></pre> <p>You can set the specific version (e.g. <code>dynamic-forms@2.0.0</code>), use tags (e.g. <code>dynamic-forms@latest</code>) or semver ranges (e.g. <code>dynamic-forms@^2.0.0</code>). See UNPKG page for more information.</p>"},{"location":"start/loading/","title":"Loading the library","text":"<p>Choose your favorite import method</p>"},{"location":"start/loading/#from-installed-sources","title":"From installed sources","text":"ES6 Module (recommended)CommonJS <pre><code>&lt;script type=\"module\"&gt;\n    import { makeForm } '@simomosi/dynamic-forms';\n&lt;/script&gt;\n</code></pre> <pre><code>const { makeForm } = require('@simomosi/dynamic-forms');\n</code></pre>"},{"location":"start/loading/#from-cdn","title":"From CDN","text":"Script tagES6 Module <pre><code>&lt;script src = 'https://unpkg.com/@simomosi/dynamic-forms@latest'&gt;&lt;/script&gt;\n</code></pre> <pre><code>&lt;script type=\"module\"&gt;\n    import { makeForm } from 'https://unpkg.com/@simomosi/dynamic-forms@latest';\n&lt;/script&gt;\n</code></pre> <p>Be careful to not include the library twice!</p>"},{"location":"tutorial/create_instance/","title":"Tutorial - Form creation","text":""},{"location":"tutorial/create_instance/#preconditions","title":"Preconditions","text":"<p>Did you already installed and loaded the library? Then go on, you are almost there!</p> <p>Let's assume we are working on the following html form:</p> <pre><code>&lt;form id='form_id'&gt;\n    &lt;label for=\"field_one\"&gt;Field one&lt;/label&gt;\n    &lt;select id=\"field_one\" name='field_one'&gt;\n        &lt;option value=\"\" selected&gt;&lt;/option&gt;\n        &lt;option value=\"1\"&gt;One&lt;/option&gt;\n        &lt;option value=\"2\"&gt;Two&lt;/option&gt;\n    &lt;/select&gt;\n\n    &lt;label for=\"field_two\"&gt;Field two&lt;/label&gt;\n    &lt;select id=\"field_two\" name='field_two'&gt;\n        &lt;option value=\"\" selected&gt;&lt;/option&gt;\n    &lt;/select&gt;\n&lt;/form&gt;\n</code></pre> <p>Let's assume we loaded dynamic-forms using a CDN: <pre><code>    &lt;script type=\"module\"&gt;\n        import { makeForm } from 'https://unpkg.com/@simomosi/dynamic-forms@latest';\n    &lt;/script&gt;\n</code></pre></p>"},{"location":"tutorial/create_instance/#write-form-configuration","title":"Write form configuration","text":"<p>For the form configuration we need to write 2 lists:</p> <ol> <li>fields: a list of form fields with custom behavior (using the field configuration format); a field with a remote url for fetching its values is a custom behavior field;</li> <li>rules: a list which indicates when a field related event (usually a <code>change</code>) should notify other fields (using the update rule format)</li> </ol> <pre><code>const formConfiguration = {\n    id: 'form_id',\n    fields: [\n        {\n            name: 'field_two',\n            fetch: {\n                makeUrl: (data) =&gt; `https://url/to/api/`,\n            }\n        }\n    ],\n    rules: [\n        {\n            name: 'field_one',\n            update: ['field_two']\n        },\n    ]\n};\n</code></pre> <p>Note: we didn't need to specify a configuration for <code>field_one</code>.</p>"},{"location":"tutorial/create_instance/#create-the-dynamic-form","title":"Create the dynamic form","text":"<p>Create an instance and forget about it: dynamic-forms will work by itself!</p> <pre><code>const form = makeForm(formConfiguration);\n</code></pre>"},{"location":"tutorial/create_instance/#done","title":"Done!","text":"<p>Look at the network tab in developer console/tools while you play with your form!</p> <p>Of course you need a real api-endpoint to load your values. For a working example open files in the example folder in your browser. </p> <p>This is a basic configuration which works with default values. To customize it to your needs check the documentation chapter.</p>"},{"location":"tutorial/initial_status/","title":"Tutorial - Set the Initial Status","text":"<p>Sometimes you need to load a prefilled form, and the initial values should trigger actions like retrieving data, hide or disable other fields.</p> <p>Dynamic-forms can automatically set the form initial status and trigger those operations for you.</p> <p>You need to list all the fields which requires the initialisation, describing:</p> <ol> <li>Their name</li> <li>Their initial value (optional)</li> </ol> <pre><code>const formConfiguration = {\n    id: 'form_id',\n    fields:[/* ... */],\n    rules: [/* ... */],\n    init: [\n        {\n            name: 'field_one',\n            value: '1'\n        },\n    ]\n};\n</code></pre> <p>Note: you need to specify an API-endpoint in <code>fields</code> for <code>field_one</code> to work.</p> <p>Dynamic-forms uses:</p> <ul> <li>the information specified in the <code>fields</code> section to retrieve remote data for each field specified in the <code>init</code> section</li> <li>the informations specified in the <code>rules</code> section to infer what data should be retrieved after the initialisation</li> </ul> <p>In the example above, dynamic-forms will first initialise <code>field_one</code> using <code>fields</code> and <code>init</code> rules, then it will initialise <code>field_two</code> using (update) <code>rules</code> as specified in the previous page.</p> <p>If you need to specify other data, just list their name and value in the <code>init</code> collection just like they were form fields.</p>"},{"location":"tutorial/initial_status/#wait-for-complete-initialisation","title":"Wait for complete initialisation","text":"<p>The initialisation phase is an asynchronous procedure: your script will continue without waiting for the subroutine to end. </p> <p>If you need to execute code after the initialisation is complete, use the <code>ready</code> function as shown below.</p> PromiseAsync/Await <pre><code>const form = makeForm(formConfiguration);\nform.ready().then(() =&gt; {\n    /* Your code here */\n});\n</code></pre> <pre><code>async function initialiseForm() {\n    let form = makeForm(formConfiguration);\n    await form.ready();\n    /* Your code here */\n}\ninitialiseForm();\n</code></pre>"}]}